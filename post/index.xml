<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ryszard Szymański</title>
    <link>/post/</link>
    <description>Recent content in Posts on Ryszard Szymański</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 25 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Don&#39;t Stop At Giving Feedback. Show How It&#39;s Done</title>
      <link>/post/2024-05-25-don-t-stop-at-giving-feedback-show-how-it-s-done/</link>
      <pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/2024-05-25-don-t-stop-at-giving-feedback-show-how-it-s-done/</guid>
      <description>When giving feedback it’s very easy just give out requests. For example during code reviews you might say:
 This variable name is difficult to read. Please change it to something more readable.
 Or to refer to known heuristics:
 This code does not follow the Don&amp;rsquo;t Repeat Yourself (DRY) principle. Please remove duplicate code.
 While it may sound simple, I think this sort of feedback is just a way of giving others more work.</description>
    </item>
    
    <item>
      <title>2 Examples of Why You Should Not Use Self-righteous Statements</title>
      <link>/post/2024-05-18-2-examples-of-why-you-should-not-use-self-righteous-assertions/</link>
      <pubDate>Sat, 18 May 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/2024-05-18-2-examples-of-why-you-should-not-use-self-righteous-assertions/</guid>
      <description>I am not a fan of using self-righteous words like never, trivial, obvious, clearly or impossible.
Fun fact, whenever I used those words it would usually blow up in my face.
In this post I’d like to argue why most of the time using such words in statements is a bad idea.
Example 1: Saying That Something is Impossible I remember a time when I was working on a task. While presenting the results to the client, I was asked if we could make some adjustments.</description>
    </item>
    
    <item>
      <title>2 cases when using RTFM is bad</title>
      <link>/post/2024-05-12-2-cases-when-using-rtfm-is-bad/</link>
      <pubDate>Sun, 12 May 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/2024-05-12-2-cases-when-using-rtfm-is-bad/</guid>
      <description>RTFM stands for read the friendly manual. While it is good advice, I don’t think giving it as feedback to someone is very productive. It might also be the wrong advice in certain cases.
In this post I’d like to go through two situations where saying RTFM is just not a good thing to do.
Case 1: Your Manual is Bad You wrote a manual or some documentation and you receive the same questions from different people.</description>
    </item>
    
    <item>
      <title>Bad Software Engineers Blame their Tools</title>
      <link>/post/2024-05-06-bad-software-engineers-blame-their-tools/</link>
      <pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/2024-05-06-bad-software-engineers-blame-their-tools/</guid>
      <description>Złej baletnicy przeszkadza rąbek u spódnicy is a popular polish idiom that can be considered an equivalent of A bad workman always blames his tools
This idiom turned out to be one of my first professional guidelines. It all started with my boss talking with one of my colleagues.
My boss was doing some coding in their office, my colleague walked in because they needed something. They looked at my bosses computer and asked “Are you able to code in a light theme IDE?</description>
    </item>
    
    <item>
      <title>2 Unobvious But Effective Problem Solving Techniques</title>
      <link>/post/2024-04-28-2-unobvious-but-effective-problem-solving-techniques/</link>
      <pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/2024-04-28-2-unobvious-but-effective-problem-solving-techniques/</guid>
      <description>As a software engineer, most of my time is spent on solving different kinds of problems. These problems are not necessarily always technical in nature.
Sometimes instead of solving the problem, you can find a solution that doesn’t necessarily involve resolving the issue directly.
In this post I’d like to share two techniques that allow you to do that.
Technique 1: Reframing the Problem Sometimes when we are asked to solve the problem, the problem statement might be incorrect.</description>
    </item>
    
    <item>
      <title>Stop Doing Large Rewrites</title>
      <link>/post/2024-04-22-stop-doing-large-rewrites/</link>
      <pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/2024-04-22-stop-doing-large-rewrites/</guid>
      <description>You join a project, it’s an existing codebase. As you sit down you notice how messy and suboptimal things are.
Those things slow you down to the point where you start feeling that it might be faster if you rewrite the whole thing from scratch instead of trying to implement it alongside the existing code.
Well, it might not be that easy ;)
In this post I’d like to explore different perspectives of rewriting software, show how risky of a bet that is and whether there are cases where it might indeed make sense.</description>
    </item>
    
    <item>
      <title>4 UX Design Inspired Tips to Improve your Communication Skills</title>
      <link>/post/2024-04-13-4-ux-inspired-tips-to-improve-your-communication-skills/</link>
      <pubDate>Sat, 13 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/2024-04-13-4-ux-inspired-tips-to-improve-your-communication-skills/</guid>
      <description>Communication is an interface for interacting with another person. Just like a UI you use to interact with some digital product.
Similarly to how you have delightful and frustrating apps, you can encounter cases where communication with one person is super fun and easy while in other cases it might be a source of frustration.
In this post I’d like to explore the topic of communication from the perspective of design concepts I learned in The Design of Everyday Things and how we can leverage UX concepts to make our communication better.</description>
    </item>
    
    <item>
      <title>5 Delegation Tips I Learned While Using a Concierge Service</title>
      <link>/post/2024-04-05-5-delegation-tips-i-learned-while-using-a-concierge-service/</link>
      <pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/2024-04-05-5-delegation-tips-i-learned-while-using-a-concierge-service/</guid>
      <description>I am fortunate to work at a company that offers a benefit in form of a concierge service.
I was skeptical at first, but after hearing from others how much they like it, I decided to give it a go.
There were cases that didn’t go well, but many of them went super well. I’d even argue that most of the time when it didn’t go well it was me who didn’t do a good job in delegating.</description>
    </item>
    
    <item>
      <title>3 benefits of journaling for 165 days</title>
      <link>/post/2024-03-31-3-benefits-of-journaling-for-165-days/</link>
      <pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/2024-03-31-3-benefits-of-journaling-for-165-days/</guid>
      <description>Journaling is a topic I have been interested in for the last couple of years. Specifically, the potential mental health related benefits you get from it.
Historically I was never able to make the habit stick&amp;hellip; Until now! Today my streak is 165 days of journaling every day.
In this post I will describe the benefits I have noticed during that time along with some tips that helped to stick with the habit.</description>
    </item>
    
    <item>
      <title>Continuous FYI - 6 Benefits of Keeping Everyone in the Loop</title>
      <link>/post/2024-03-23-continuous-fyi-6-benefits-of-keeping-everyone-in-the-loop/</link>
      <pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/2024-03-23-continuous-fyi-6-benefits-of-keeping-everyone-in-the-loop/</guid>
      <description>As a software engineer I work in a team. We work together to achieve a common goal or set of goals.
We can work faster by collaborating and leveraging synergy compared to a situation where we would be working separately without communicating with each other.
Imagine a basketball team trying to run a play. We need everyone on the team to know that play and a point guard / coach, who will give a signal to run it.</description>
    </item>
    
    <item>
      <title>&#39;More modular code is more maintainable code&#39; is a lie</title>
      <link>/post/2024-03-16-more-modular-code-is-more-maintainable-code-is-a-lie/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/2024-03-16-more-modular-code-is-more-maintainable-code-is-a-lie/</guid>
      <description>I often hear the following phrase &amp;ldquo;thanks to doing ___ the code is now more modular and more maintainable&amp;rdquo;. Sounds reasonable, but it doesn&amp;rsquo;t capture the full picture.
There are cases, when more modularity might make things less maintainable.
First let&amp;rsquo;s establish what I mean by maintainable. Maintainable code is code that is easy to change.
Example 1: Extracting things into a separate package With that in mind, think about the following situation:</description>
    </item>
    
    <item>
      <title>3 UX Design Concepts That Can Make You A Better Software Engineer</title>
      <link>/post/2022-06-16-3-ux-design-concepts-that-can-make-you-a-better-software-engineer/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-06-16-3-ux-design-concepts-that-can-make-you-a-better-software-engineer/</guid>
      <description>Why would software engineers even bother learning UX design skills Whenever I heard about UI/UX design, I thought I don&amp;rsquo;t need to learn about it because I am not interested in becoming a frontend developer.
Ironically, in later stages of my career I was getting more involved in frontend development. As a result I am actively learning to improve in that area and this is when I looked into The Design of Everyday Things book.</description>
    </item>
    
    <item>
      <title>3 Approaches That Help Me Deal With Stress When Feeling Overwhelmed At Work</title>
      <link>/post/2022-05-21-3-approaches-that-help-me-when-feeling-overwhelmed-at-work/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-05-21-3-approaches-that-help-me-when-feeling-overwhelmed-at-work/</guid>
      <description>When do I feel overwhelmed at work Many have experienced being overwhelmed at work at some point during their careers. This can be caused by the amount or the difficulty of the responsibilities a given person has. Such situations can increase stress and negatively impact personal life outside of work.
I personally feel the most overwhelmed at work, when I have multiple topics on my plate and switch contexts often. In this blog post I want to share 3 approaches that help me in those kinds of situations and allow me to mitigate the negative effects of it.</description>
    </item>
    
    <item>
      <title>5 Tips To Not Go Mad While Working With Colors As A Software Engineer</title>
      <link>/post/2022-05-15-5-tips-to-not-go-mad-while-working-with-colors-as-a-software-engineer/</link>
      <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-05-15-5-tips-to-not-go-mad-while-working-with-colors-as-a-software-engineer/</guid>
      <description>Why I hated working with colors I would say that I was always below average in terms of artistic abilities compared to my peers in school. Things were so bad to the point where my mother had to work really hard to help me do my homework for art classes (thanks mom!). I thought that in order to be able to make something look good or pretty, you need to be born with some kind of talent.</description>
    </item>
    
    <item>
      <title>The Problem With YAGNI</title>
      <link>/post/2022-05-08-the-problem-with-yagni/</link>
      <pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-05-08-the-problem-with-yagni/</guid>
      <description>What is YAGNI about YAGNI stands for You aren&amp;rsquo;t gonna need it and advises that you should only implement things, when you actually need them, and never when you foresee them being needed in the future. The idea is to avoid different kinds of problems that come with a premature implementation:
 You might build the wrong thing - you wasted time on implementing that You might add unnecessary complexity to your code You used up time that could have been used on something that is actually needed now  However, at the same time we should be careful while using YAGNI as used blindly it might lead us to doing more harm than good.</description>
    </item>
    
    <item>
      <title>3 Strategies for Testing Database Interactions for Software Engineers</title>
      <link>/post/2022-05-02-3-strategies-for-testing-database-interactions-in-your-code/</link>
      <pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-05-02-3-strategies-for-testing-database-interactions-in-your-code/</guid>
      <description>Why is it Important to test Database Interactions Chances are you are writing software that interacts with some kind of a database. This might be a dashboard that fetches data from a database and visualizes it in a convenient manner or a classic CRUD application that uses a database for persistent storage.
Those interactions can be a key element of your app that need to be working at all times. Imagine your dashboard not showing any visualization because there is a bug causing an error while fetching the data from the database, or even worse it is fetching the data incorrectly resulting in incorrect insights which then leads to incorrect decisions being made.</description>
    </item>
    
    <item>
      <title>The Problem With DRY</title>
      <link>/post/2022-04-30-the-problem-with-dry/</link>
      <pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-30-the-problem-with-dry/</guid>
      <description>What is the DRY principle about DRY stands for Don&amp;rsquo;t Repeat Yourself and is a heuristic that each software engineer will encounter at some point during their career. An example of using this advice is abstracting repetitive code chunks into functions in your program. Robert C. Martin in Clean Code even states that duplicate code is the root of all evil. In this post I want to argue that DRY can lead to more harm than good when used blindly.</description>
    </item>
    
    <item>
      <title>Self-Care Boosts Productivity</title>
      <link>/post/2022-04-18-self-care-boosts-productivity/</link>
      <pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-18-self-care-boosts-productivity/</guid>
      <description>Introduction I always considered myself an ambitious and hard-working person. Things like education (learning) and self improvement were always important to me. They were so important to the point where it would interfere with other priorities - such as taking care of myself.
A good example of that is my love/hate relationship with algorithmic challenges. I am very fascinated by them and I feel great satisfaction whenever I am able to solve a particularly difficult problem.</description>
    </item>
    
    <item>
      <title>The Problem With Best Practices</title>
      <link>/post/2022-04-09-the-problem-with-best-practices/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-09-the-problem-with-best-practices/</guid>
      <description>Introduction Best Practices is a term that I encounter often as a software engineer. Code reviews would be the situations where I would encounter the term most often, for example a colleague suggesting to do things differently and when asked about the advantages of their solution they would reply that it is a best practice. After some time I realized that we all should be more careful when using this term and start thinking more critically whenever we hear it.</description>
    </item>
    
    <item>
      <title>Be An Optimist</title>
      <link>/post/2022-03-21-be-an-optimist/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-03-21-be-an-optimist/</guid>
      <description>Introduction At some point we all learn about optimism and pessimism through the half-full and half-empty glass of water analogy. Some of us might have even heard about a third component - realism where we just drink the water and get on with our life. As a software engineer and someone who always aimed to base my decisions on facts and numbers, I liked to think of myself as more of a realist.</description>
    </item>
    
    <item>
      <title>Stop Fighting Your Impostor Syndrome</title>
      <link>/post/2022-03-08-stop-fighting-your-impostor-syndrome/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-03-08-stop-fighting-your-impostor-syndrome/</guid>
      <description>Introduction Impostor Syndrome is a state in which a person&amp;rsquo;s confidence in themselves is way lower than their competencies. Many of us (including myself) have and still are struggling with it. I tried to work on it using approaches from resources on how to beat or overcome impostor syndrome. However, none of those seemed to particularly work in my case.
The real game changer for me was learning that impostor syndrome actually has its benefits, that can help you long term and that at the same time you can minimize its negative implications.</description>
    </item>
    
  </channel>
</rss>
