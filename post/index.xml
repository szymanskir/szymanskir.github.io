<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ryszard Szymański</title>
    <link>/post/</link>
    <description>Recent content in Posts on Ryszard Szymański</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3 Strategies for Testing Database Interactions for Software Engineers</title>
      <link>/post/2022-05-02-3-strategies-for-testing-database-interactions-in-your-code/</link>
      <pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-05-02-3-strategies-for-testing-database-interactions-in-your-code/</guid>
      <description>Why is it Important to test Database Interactions Chances are you are writing software that interacts with some kind of a database. This might be a dashboard that fetches data from a database and visualizes it in a convenient manner or a classic CRUD application that uses a database for persistent storage.
Those interactions can be a key element of your app that need to be working at all times. Imagine your dashboard not showing any visualization because there is a bug causing an error while fetching the data from the database, or even worse it is fetching the data incorrectly resulting in incorrect insights which then leads to incorrect decisions being made.</description>
    </item>
    
    <item>
      <title>The Problem With DRY</title>
      <link>/post/2022-04-30-the-problem-with-dry/</link>
      <pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-30-the-problem-with-dry/</guid>
      <description>What is the DRY principle about DRY stands for Don&amp;rsquo;t Repeat Yourself and is a heuristic that each software engineer will encounter at some point during their career. An example of using this advice is abstracting repetitive code chunks into functions in your program. Robert C. Martin in Clean Code even states that duplicate code is the root of all evil. In this post I want to argue that DRY can lead to more harm than good when used blindly.</description>
    </item>
    
    <item>
      <title>Self-Care Boosts Productivity</title>
      <link>/post/2022-04-18-self-care-boosts-productivity/</link>
      <pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-18-self-care-boosts-productivity/</guid>
      <description>Introduction I always considered myself an ambitious and hard-working person. Things like education (learning) and self improvement were always important to me. They were so important to the point where it would interfere with other priorities - such as taking care of myself.
A good example of that is my love/hate relationship with algorithmic challenges. I am very fascinated by them and I feel great satisfaction whenever I am able to solve a particularly difficult problem.</description>
    </item>
    
    <item>
      <title>The Problem With Best Practices</title>
      <link>/post/2022-04-09-the-problem-with-best-practices/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-09-the-problem-with-best-practices/</guid>
      <description>Introduction Best Practices is a term that I encounter often as a software engineer. Code reviews would be the situations where I would encounter the term most often, for example a colleague suggesting to do things differently and when asked about the advantages of their solution they would reply that it is a best practice. After some time I realized that we all should be more careful when using this term and start thinking more critically whenever we hear it.</description>
    </item>
    
    <item>
      <title>Be An Optimist</title>
      <link>/post/2022-03-21-be-an-optimist/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-03-21-be-an-optimist/</guid>
      <description>Introduction At some point we all learn about optimism and pessimism through the half-full and half-empty glass of water analogy. Some of us might have even heard about a third component - realism where we just drink the water and get on with our life. As a software engineer and someone who always aimed to base my decisions on facts and numbers, I liked to think of myself as more of a realist.</description>
    </item>
    
    <item>
      <title>Stop Fighting Your Impostor Syndrome</title>
      <link>/post/2022-03-08-stop-fighting-your-impostor-syndrome/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-03-08-stop-fighting-your-impostor-syndrome/</guid>
      <description>Introduction Impostor Syndrome is a state in which a person&amp;rsquo;s confidence in themselves is way lower than their competencies. Many of us (including myself) have and still are struggling with it. I tried to work on it using approaches from resources on how to beat or overcome impostor syndrome. However, none of those seemed to particularly work in my case.
The real game changer for me was learning that impostor syndrome actually has its benefits, that can help you long term and that at the same time you can minimize its negative implications.</description>
    </item>
    
  </channel>
</rss>
